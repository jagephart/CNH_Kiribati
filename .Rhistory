# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "Spearguns")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "Fishing Lines")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "Active Fish Traps")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "Underwater flashlights")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "Wood canoes")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "Eskies/portable coolers")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "SCUBA diving equipment")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "Freezers (electric or propane)")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "Ice machines")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "Fishing Nets (purse)")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "Drag Nets")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "Harpoons/Spears")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "FAD (Fish Aggregating Device)")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- fishassetRosterTidy %>%
filter(fish_asset_roster__id == "Other Fishing Equipment (note)")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Clean outside roster
#___________________________________________________________________________________________#
outsideRoster <- read_dta(file.path(datadir, "VRS", "outside_roster.dta"))
outsideRoster <- clean_data(outsideRoster)[[1]]
# Extract variable label attributes
var_labels <- clean_data(outsideRoster)[[2]]
# Change class to character to allow left_join without warning below
var_labels <- var_labels %>%
mutate(col.names = as.character(col.names))
# Make tidy
outsideRosterTidy <- tidy_data(df = outsideRoster, pivot_col_1 = "village_distance_out", pivot_col_last = "travel_time_out", var_labels = var_labels, question_no = FALSE)
# Filter out short answer responses before moving on to plotting data subsets
short_answers <- c("Other transport mode outside boundary", "Travel time outside boundary")
# Short answers - units need to be standardized and some responses need to be translated
outsideRosterTidy <- outsideRosterTidy %>%
filter(question %in% short_answers == FALSE)
write.csv(outsideRosterTidy, "Outputs/outsideRosterTidy.csv", row.names = FALSE)
# Output short answer responses for translation
other_answers <- outsideRosterTidy %>%
filter(question %in% short_answers) %>%
filter(response != "") %>%
unique()
write.csv(other_answers, "Outputs/outsideRoster_other_answers.csv", row.names = FALSE)
event_subsets <- outsideRosterTidy %>%
select(outside_roster__id) %>%
unique()
event_subsets
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- outsideRosterTidy %>%
filter(outside_roster__id == "Clinic/Hospital")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- outsideRosterTidy %>%
filter(outside_roster__id == "Bank")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- outsideRosterTidy %>%
filter(outside_roster__id == "Nearest Market")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- outsideRosterTidy %>%
filter(outside_roster__id == "Nearest Post Office")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- outsideRosterTidy %>%
filter(outside_roster__id == "Nearest Credit Facility")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- outsideRosterTidy %>%
filter(outside_roster__id == "Nearest Police Station")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- outsideRosterTidy %>%
filter(outside_roster__id == "Nearest Court House")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- outsideRosterTidy %>%
filter(outside_roster__id == "Airport")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- outsideRosterTidy %>%
filter(outside_roster__id == "Nearest Trade Store/Supermarket")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- outsideRosterTidy %>%
filter(outside_roster__id == "Nearest fish landing site")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- outsideRosterTidy %>%
filter(outside_roster__id == "Nearest Church")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
shareRoster <- read_dta(file.path(datadir, "VRS", "share_roster.dta"))
#___________________________________________________________________________________________#
# Clean share roster
#___________________________________________________________________________________________#
shareRoster <- clean_data(shareRoster)[[1]]
# Extract variable label attributes
var_labels <- clean_data(shareRoster)[[2]]
# Change class to character to allow left_join without warning below
var_labels <- var_labels %>%
mutate(col.names = as.character(col.names))
# Make tidy
shareRosterTidy <- tidy_data(df = shareRoster, pivot_col_1 = "catch_receiver__1", pivot_col_last = "share_other", var_labels = var_labels, question_no = FALSE)
# Filter out short answer responses before moving on to plotting data subsets
short_answers <- c("Other giver of the sharing of catches", "Other receiver from the sharing of catches", "Other relationship from the sharing of catches",
"Other sharer of the catches")
# Short answers - units need to be standardized and some responses need to be translated
shareRosterTidy <- shareRosterTidy %>%
filter(question %in% short_answers == FALSE)
write.csv(shareRosterTidy, "Outputs/shareRosterTidy", row.names = FALSE)
# Output short answer responses for translation
other_answers <- shareRosterTidy %>%
filter(question %in% short_answers) %>%
filter(response != "") %>%
unique()
write.csv(other_answers, "Outputs/shareRoster_other_answers.csv", row.names = FALSE)
event_subsets <- shareRosterTidy %>%
select(share_roster__id) %>%
unique()
event_subsets
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all MULTI-select questions: filter by event_subsets
plotDF_multiple_response <- shareRosterTidy %>%
filter(share_roster__id == "Finfish")  %>%
filter(is.na(option)==FALSE) %>% # Removes all "shared individually or through institution" question - all blank
filter(response == "1")
# Plot histogram
plot_multi_response(plotDF_multiple_response)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all MULTI-select questions: filter by event_subsets
plotDF_multiple_response <- shareRosterTidy %>%
filter(share_roster__id == "Other non-finfish seafood (shellfish, sea worm, etc.)")  %>%
filter(is.na(option)==FALSE) %>%
filter(response == "1")
# Plot histogram
plot_multi_response(plotDF_multiple_response)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all MULTI-select questions: filter by event_subsets
plotDF_multiple_response <- shareRosterTidy %>%
filter(share_roster__id == "Non-fish foods")  %>%
filter(is.na(option)==FALSE) %>%
filter(response == "1")
# Plot histogram
plot_multi_response(plotDF_multiple_response)
#___________________________________________________________________________________________#
# Clean VRS roster
#___________________________________________________________________________________________#
vrsRoster <- read_dta(file.path(datadir, "VRS", "vrs_roster.dta"))
vrsRoster <- clean_data(vrsRoster)[[1]]
# Extract variable label attributes
var_labels <- clean_data(vrsRoster)[[2]]
# Change class to character to allow left_join without warning below
var_labels <- var_labels %>%
mutate(col.names = as.character(col.names))
# Make tidy
vrsRosterTidy <- tidy_data(df = vrsRoster, pivot_col_1 = "vrs_sex", pivot_col_last = "live_years", var_labels = var_labels, question_no = FALSE)
# Filter out short answer responses before moving on to plotting data subsets
short_answers <- c("Other position of the respondent")
# Short answers - units need to be standardized and some responses need to be translated
vrsRosterTidy <- vrsRosterTidy %>%
filter(question %in% short_answers == FALSE)
write.csv(vrsRosterTidy, "Outputs/vrsRosterTidy.csv", row.names = FALSE)
# Output short answer responses for translation
other_answers <- vrsRosterTidy %>%
filter(question %in% short_answers) %>%
filter(response != "") %>%
unique()
write.csv(other_answers, "Outputs/vrsRoster_other_answers.csv", row.names = FALSE)
event_subsets <- vrsRosterTidy %>%
select(vrs_roster__id) %>%
unique()
event_subsets
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- vrsRosterTidy %>%
filter(vrs_roster__id == "1")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: VRS Roster 2 only contains one individual with the following characteristics
#vrsRosterTidy %>% filter(vrs_roster__id==2)
#___________________________________________________________________________________________#
# Clean within roster
#___________________________________________________________________________________________#
withinRoster <- read_dta(file.path(datadir, "VRS", "within_roster.dta"))
withinRoster <- clean_data(withinRoster)[[1]]
# Extract variable label attributes
var_labels <- clean_data(withinRoster)[[2]]
# Change class to character to allow left_join without warning below
var_labels <- var_labels %>%
mutate(col.names = as.character(col.names))
# Make tidy
withinRosterTidy <- tidy_data(df = withinRoster, pivot_col_1 = "transport_mode_within", pivot_col_last = "travel_time_within", var_labels = var_labels, question_no = FALSE)
# Filter out short answer responses before moving on to plotting data subsets
short_answers <- c("Other transport mode within boundary", "Travel time within boundary")
# Short answers - units need to be standardized and some responses need to be translated
withinRosterTidy <- withinRosterTidy %>%
filter(question %in% short_answers == FALSE)
write.csv(withinRosterTidy, "Outputs/withinRosterTidy.csv", row.names = FALSE)
# Output short answer responses for translation
other_answers <- withinRosterTidy %>%
filter(question %in% short_answers) %>%
filter(response != "") %>%
unique()
write.csv(other_answers, "Outputs/withinRoster_other_answers.csv", row.names = FALSE)
event_subsets <- withinRosterTidy %>%
select(within_roster__id) %>%
unique()
event_subsets
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- withinRosterTidy %>%
filter(within_roster__id == "Nearest Church")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- withinRosterTidy %>%
filter(within_roster__id == "Nearest Trade Store/Supermarket")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- withinRosterTidy %>%
filter(within_roster__id == "Airport")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- withinRosterTidy %>%
filter(within_roster__id == "Clinic/Hospital")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- withinRosterTidy %>%
filter(within_roster__id == "Nearest fish landing site")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- withinRosterTidy %>%
filter(within_roster__id == "Nearest Credit Facility")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- withinRosterTidy %>%
filter(within_roster__id == "Nearest Market")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- withinRosterTidy %>%
filter(within_roster__id == "Nearest Post Office")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- withinRosterTidy %>%
filter(within_roster__id == "Nearest Court House")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Visualize data
#___________________________________________________________________________________________#
# Note: Roster is all single-select questions: no filtering needed; subset by event_subsets
plotDF_single <- withinRosterTidy %>%
filter(within_roster__id == "Bank")
# Plot histogram
plot_single_response(plotDF_single, bin_n = 20)
#___________________________________________________________________________________________#
# Clean market data
#___________________________________________________________________________________________#
market.files <- list.files("Data/HIES_raw_19May20/Market Survey")
# ID unique food items
food.files <- unique(gsub("_.*", '', market.files))
food.files <- food.files[food.files != "MarketSurvey.dta"]
food.items <- food.files
food.items[food.items == "veges"] <- "vege" # make singular (have to keep plural to read in file)
# Combine food and unit rosters
food.roster <- read_dta(file.path("Data", "HIES_raw_19May20", "Market Survey",
paste(food.files[1], "roster.dta", sep ="_")))
unit.roster <- read_dta(file.path("Data", "HIES_raw_19May20", "Market Survey",
paste(food.files[1], "unit", "roster.dta", sep ="_")))
# FIX IT - JG, not understanding what this was for:
# Standardize column names
colnames(food.roster) <- gsub(paste(food.items[1], "s", sep = ""), paste(food.items[1]), colnames(food.roster))
colnames(unit.roster) <- gsub(paste(food.items[1], "s", sep = ""), paste(food.items[1]), colnames(unit.roster))
# Merge by roster__id column (but not unit_roster__id column)
marketSurvey <- full_join(food.roster, unit.roster, by = c("interview__key", "interview__id", paste(food.items[1], "roster__id", sep ="_")))
# Clean and extract variable label attributes
marketSurvey <- clean_data(marketSurvey)[[1]]
# Remove y/n units columns and rename others
select.cols <- c("interview__key", "interview__id",
paste(food.items[1], "roster__id", sep = "_"),
paste("other", food.items[1], "units", sep = "_"),
paste(food.items[1], "available", sep = "_"),
paste(food.items[1], "avail_oth", sep = "_"),
paste(food.items[1], "unit_roster__id", sep = "_"),
paste(food.items[1], "price", sep = "_"),
paste(food.items[1], "weight", sep = "_"),
paste(food.items[1], "unit_oth", sep = "_")
)
marketSurvey <- marketSurvey %>%
select(all_of(select.cols))
# Standardize column names
colnames(marketSurvey) <- c("interview__key", "interview__id", "roster__id","other_units","availability","availability_other",
"unit_roster__id","price","weight", "unit_other")
for(i in 2:length(food.items)){
food.roster <- read_dta(file.path("Data", "HIES_raw_19May20", "Market Survey",
paste(food.files[i], "roster.dta", sep ="_")))
unit.roster <- read_dta(file.path("Data", "HIES_raw_19May20", "Market Survey",
paste(food.files[i], "unit", "roster.dta", sep ="_")))
# Standardize column names
colnames(food.roster) <- gsub(paste(food.items[i], "s", sep = ""), paste(food.items[i]), colnames(food.roster))
colnames(unit.roster) <- gsub(paste(food.items[i], "s", sep = ""), paste(food.items[i]), colnames(unit.roster))
# Merge by roster__id column (but not unit_roster__id column)
food.unit.roster <- full_join(food.roster, unit.roster, by = c("interview__key", "interview__id", paste(food.items[i], "roster__id", sep ="_")))
# Clean and extract variable label attributes
food.unit.roster <- clean_data(food.unit.roster)[[1]]
# Remove y/n units columns and rename others
select.cols <- c("interview__key", "interview__id",
paste(food.items[i], "roster__id", sep = "_"),
paste("other", food.items[i], "units", sep = "_"),
paste(food.items[i], "available", sep = "_"),
paste(food.items[i], "avail_oth", sep = "_"),
paste(food.items[i], "unit_roster__id", sep = "_"),
paste(food.items[i], "price", sep = "_"),
paste(food.items[i], "weight", sep = "_"),
paste(food.items[i], "unit_oth", sep = "_")
)
food.unit.roster <- food.unit.roster %>%
select_at(vars(select.cols))
# Standardize column names
colnames(food.unit.roster) <- c("interview__key", "interview__id", "roster__id","other_units","availability","availability_other",
"unit_roster__id","price","weight", "unit_other")
# Join with marketSurvey to create join all foods
marketSurvey <- bind_rows(marketSurvey, food.unit.roster)
}
# Merge with survey location info
survey.info <- read_dta(file.path("Data", "HIES_raw_19May20", "Market Survey", "MarketSurvey.dta"))
survey.info <- clean_data(survey.info)[[1]]
survey.info <- survey.info %>%
select("interview__key", "interview__id", "ms_island", "ms_village", "ea_market")
marketSurvey <- full_join(survey.info, marketSurvey, by = c("interview__key", "interview__id"))
# Plot food item availability
plot.food.availability(marketSurvey)
